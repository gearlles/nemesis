/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public class LDecl implements SyntaxNode {

  private SyntaxNode parent;
  private Decl decl;
  private LDecl prox;

  public LDecl (Decl decl, LDecl prox) {
    this.decl = decl;
    if (decl != null) decl.setParent(this);
    this.prox = prox;
    if (prox != null) prox.setParent(this);
  }

  public Decl getDecl() {
    return decl;
  }

  public void setDecl(Decl decl) {
    this.decl = decl;
  }

  public LDecl getProx() {
    return prox;
  }

  public void setProx(LDecl prox) {
    this.prox = prox;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (decl != null) decl.accept(visitor);
    if (prox != null) prox.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (decl != null) decl.traverseTopDown(visitor);
    if (prox != null) prox.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (decl != null) decl.traverseBottomUp(visitor);
    if (prox != null) prox.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("LDecl(\n");
      if (decl != null)
        buffer.append(decl.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (prox != null)
        buffer.append(prox.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [LDecl]");
    return buffer.toString();
  }
}
