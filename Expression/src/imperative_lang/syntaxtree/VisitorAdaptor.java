/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public abstract class VisitorAdaptor implements Visitor {

  public void visit(LDecl lDecl) { visit(); }
  public void visit(Decl decl) { visit(); }
  public void visit(Fields fields) { visit(); }
  public void visit(LCom lCom) { visit(); }
  public void visit(Expr expr) { visit(); }
  public void visit(Numero numero) { visit(); }
  public void visit(Op op) { visit(); }
  public void visit(Variavel variavel) { visit(); }
  public void visit(Array array) { visit(); }
  public void visit(Field field) { visit(); }
  public void visit(Reference reference) { visit(); }
  public void visit(DeReference deReference) { visit(); }
  public void visit(Com com) { visit(); }
  public void visit(Assign assign) { visit(); }
  public void visit(CIf cIf) { visit(); }
  public void visit(CWhile cWhile) { visit(); }
  public void visit(Block block) { visit(); }
  public void visit(Type type) { visit(); }
  public void visit(TInt tInt) { visit(); }
  public void visit(TBool tBool) { visit(); }
  public void visit(TArray tArray) { visit(); }
  public void visit(TStruct tStruct) { visit(); }
  public void visit(TPointer tPointer) { visit(); }

  public void visit() { }

}
