/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public class Reference extends Expr {

  private Expr pointer;

  public Reference (Expr pointer) {
    this.pointer = pointer;
    if (pointer != null) pointer.setParent(this);
  }

  public Expr getPointer() {
    return pointer;
  }

  public void setPointer(Expr pointer) {
    this.pointer = pointer;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (pointer != null) pointer.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (pointer != null) pointer.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (pointer != null) pointer.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Reference(\n");
      if (pointer != null)
        buffer.append(pointer.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Reference]");
    return buffer.toString();
  }
}
