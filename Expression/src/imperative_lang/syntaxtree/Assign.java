/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public class Assign extends Com {

  private Expr left;
  private Expr right;

  public Assign (Expr left, Expr right) {
    this.left = left;
    if (left != null) left.setParent(this);
    this.right = right;
    if (right != null) right.setParent(this);
  }

  public Expr getLeft() {
    return left;
  }

  public void setLeft(Expr left) {
    this.left = left;
  }

  public Expr getRight() {
    return right;
  }

  public void setRight(Expr right) {
    this.right = right;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (left != null) left.accept(visitor);
    if (right != null) right.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (left != null) left.traverseTopDown(visitor);
    if (right != null) right.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (left != null) left.traverseBottomUp(visitor);
    if (right != null) right.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Assign(\n");
      if (left != null)
        buffer.append(left.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (right != null)
        buffer.append(right.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Assign]");
    return buffer.toString();
  }
}
