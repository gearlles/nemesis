/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public class DeReference extends Expr {

  private Expr variable;

  public DeReference (Expr variable) {
    this.variable = variable;
    if (variable != null) variable.setParent(this);
  }

  public Expr getVariable() {
    return variable;
  }

  public void setVariable(Expr variable) {
    this.variable = variable;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (variable != null) variable.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (variable != null) variable.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (variable != null) variable.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("DeReference(\n");
      if (variable != null)
        buffer.append(variable.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [DeReference]");
    return buffer.toString();
  }
}
