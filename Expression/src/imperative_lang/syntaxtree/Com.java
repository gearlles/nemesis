/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public abstract class Com implements SyntaxNode {

  private SyntaxNode parent;

  public Expr getLeft() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setLeft(Expr left) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Expr getRight() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setRight(Expr right) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Expr getTest() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setTest(Expr test) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Com getCaseTrue() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setCaseTrue(Com caseTrue) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Com getCaseFalse() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setCaseFalse(Com caseFalse) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Com getRep() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setRep(Com rep) {
    throw new ClassCastException("tried to call abstract method");
  }

  public LDecl getDecl() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setDecl(LDecl decl) {
    throw new ClassCastException("tried to call abstract method");
  }

  public LCom getSeq() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setSeq(LCom seq) {
    throw new ClassCastException("tried to call abstract method");
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public abstract void accept(Visitor visitor);
  public abstract void childrenAccept(Visitor visitor);
  public abstract void traverseTopDown(Visitor visitor);
  public abstract void traverseBottomUp(Visitor visitor);
  public String toString() {
    return toString("");
  }

  public abstract String toString(String tab);
}
