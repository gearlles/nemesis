/*
 * Generated by classgen, version 1.3
 * 27/11/13 14:42
 */
package imperative_lang.syntaxtree;

public class Array extends Expr {

  private Expr array;
  private Expr index;

  public Array (Expr array, Expr index) {
    this.array = array;
    if (array != null) array.setParent(this);
    this.index = index;
    if (index != null) index.setParent(this);
  }

  public Expr getArray() {
    return array;
  }

  public void setArray(Expr array) {
    this.array = array;
  }

  public Expr getIndex() {
    return index;
  }

  public void setIndex(Expr index) {
    this.index = index;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (array != null) array.accept(visitor);
    if (index != null) index.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (array != null) array.traverseTopDown(visitor);
    if (index != null) index.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (array != null) array.traverseBottomUp(visitor);
    if (index != null) index.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Array(\n");
      if (array != null)
        buffer.append(array.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (index != null)
        buffer.append(index.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Array]");
    return buffer.toString();
  }
}
