/*
 * Generated by classgen, version 1.3
 * 11/12/13 02:54
 */
package br.poli.ecomp.nemesis.syntaxtree;

public class Document implements SyntaxNode {

  private SyntaxNode parent;
  private Header header;
  private Settings settings;
  private Variables variables;
  private Body body;
  private Footer footer;

  public Document (Header header, Settings settings, Variables variables, Body body, Footer footer) {
    this.header = header;
    if (header != null) header.setParent(this);
    this.settings = settings;
    if (settings != null) settings.setParent(this);
    this.variables = variables;
    if (variables != null) variables.setParent(this);
    this.body = body;
    if (body != null) body.setParent(this);
    this.footer = footer;
    if (footer != null) footer.setParent(this);
  }

  public Header getHeader() {
    return header;
  }

  public void setHeader(Header header) {
    this.header = header;
  }

  public Settings getSettings() {
    return settings;
  }

  public void setSettings(Settings settings) {
    this.settings = settings;
  }

  public Variables getVariables() {
    return variables;
  }

  public void setVariables(Variables variables) {
    this.variables = variables;
  }

  public Body getBody() {
    return body;
  }

  public void setBody(Body body) {
    this.body = body;
  }

  public Footer getFooter() {
    return footer;
  }

  public void setFooter(Footer footer) {
    this.footer = footer;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (header != null) header.accept(visitor);
    if (settings != null) settings.accept(visitor);
    if (variables != null) variables.accept(visitor);
    if (body != null) body.accept(visitor);
    if (footer != null) footer.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (header != null) header.traverseTopDown(visitor);
    if (settings != null) settings.traverseTopDown(visitor);
    if (variables != null) variables.traverseTopDown(visitor);
    if (body != null) body.traverseTopDown(visitor);
    if (footer != null) footer.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (header != null) header.traverseBottomUp(visitor);
    if (settings != null) settings.traverseBottomUp(visitor);
    if (variables != null) variables.traverseBottomUp(visitor);
    if (body != null) body.traverseBottomUp(visitor);
    if (footer != null) footer.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Document(\n");
      if (header != null)
        buffer.append(header.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (settings != null)
        buffer.append(settings.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (variables != null)
        buffer.append(variables.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (body != null)
        buffer.append(body.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (footer != null)
        buffer.append(footer.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Document]");
    return buffer.toString();
  }
}
