/*
 * Generated by classgen, version 1.3
 * 11/12/13 03:36
 */
package br.poli.ecomp.nemesis.syntaxtree;

public class Declaration implements SyntaxNode {

  private SyntaxNode parent;
  private Variable var;
  private LNum value;

  public Declaration (Variable var, LNum value) {
    this.var = var;
    if (var != null) var.setParent(this);
    this.value = value;
    if (value != null) value.setParent(this);
  }

  public Variable getVar() {
    return var;
  }

  public void setVar(Variable var) {
    this.var = var;
  }

  public LNum getValue() {
    return value;
  }

  public void setValue(LNum value) {
    this.value = value;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (var != null) var.accept(visitor);
    if (value != null) value.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (var != null) var.traverseTopDown(visitor);
    if (value != null) value.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (var != null) var.traverseBottomUp(visitor);
    if (value != null) value.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Declaration(\n");
      if (var != null)
        buffer.append(var.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (value != null)
        buffer.append(value.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Declaration]");
    return buffer.toString();
  }
}
