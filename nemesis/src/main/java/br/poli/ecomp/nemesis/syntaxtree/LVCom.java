/*
 * Generated by classgen, version 1.3
 * 11/12/13 03:36
 */
package br.poli.ecomp.nemesis.syntaxtree;

public class LVCom implements SyntaxNode {

  private SyntaxNode parent;
  private VCom vcom;
  private LVCom prox;

  public LVCom (VCom vcom, LVCom prox) {
    this.vcom = vcom;
    if (vcom != null) vcom.setParent(this);
    this.prox = prox;
    if (prox != null) prox.setParent(this);
  }

  public VCom getVcom() {
    return vcom;
  }

  public void setVcom(VCom vcom) {
    this.vcom = vcom;
  }

  public LVCom getProx() {
    return prox;
  }

  public void setProx(LVCom prox) {
    this.prox = prox;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (vcom != null) vcom.accept(visitor);
    if (prox != null) prox.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (vcom != null) vcom.traverseTopDown(visitor);
    if (prox != null) prox.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (vcom != null) vcom.traverseBottomUp(visitor);
    if (prox != null) prox.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("LVCom(\n");
      if (vcom != null)
        buffer.append(vcom.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (prox != null)
        buffer.append(prox.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [LVCom]");
    return buffer.toString();
  }
}
