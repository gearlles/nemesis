/*
 * Generated by classgen, version 1.3
 * 11/12/13 03:36
 */
package br.poli.ecomp.nemesis.syntaxtree;

public class Header implements SyntaxNode {

  private SyntaxNode parent;
  private LHCom lhcom;

  public Header (LHCom lhcom) {
    this.lhcom = lhcom;
    if (lhcom != null) lhcom.setParent(this);
  }

  public LHCom getLhcom() {
    return lhcom;
  }

  public void setLhcom(LHCom lhcom) {
    this.lhcom = lhcom;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (lhcom != null) lhcom.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (lhcom != null) lhcom.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (lhcom != null) lhcom.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Header(\n");
      if (lhcom != null)
        buffer.append(lhcom.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Header]");
    return buffer.toString();
  }
}
