/*
 * Generated by classgen, version 1.3
 * 11/12/13 01:44
 */
package br.poli.ecomp.nemesis.syntaxtree;

public class Answer implements SyntaxNode {

  private SyntaxNode parent;
  private LContent lcontent;
  private String solver;

  public Answer (LContent lcontent, String solver) {
    this.lcontent = lcontent;
    if (lcontent != null) lcontent.setParent(this);
    this.solver = solver;
  }

  public LContent getLcontent() {
    return lcontent;
  }

  public void setLcontent(LContent lcontent) {
    this.lcontent = lcontent;
  }

  public String getSolver() {
    return solver;
  }

  public void setSolver(String solver) {
    this.solver = solver;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (lcontent != null) lcontent.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (lcontent != null) lcontent.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (lcontent != null) lcontent.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Answer(\n");
      if (lcontent != null)
        buffer.append(lcontent.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+solver);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Answer]");
    return buffer.toString();
  }
}
